{"version":3,"file":"react-hooks.js","sources":["../src/utils/findElement.ts","../src/useClickOutOfArea/index.ts","../src/useMoveToScroll/index.ts"],"sourcesContent":["export default function findElement<T extends HTMLElement>(target: Target<T>) {\n    if (typeof target !== \"object\") {\n        return document.querySelector<T>(target);\n    }\n\n    if (Object.hasOwn(target, \"nodeName\")) {\n        return target as T;\n    }\n\n    if (Object.hasOwn(target, \"current\")) {\n        return (target as React.RefObject<T>).current;\n    }\n\n    return null;\n}\n","import { useEffect } from \"react\";\nimport findElement from \"../utils/findElement\";\n\n/**\n * @category react-hooks\n * @description 타겟을 제외한 다른 영역의 클릭 이벤트를 발생시킬 때 사용합니다.\n * @param target 타겟을 지정하기 위한 값\n * @param callback 타겟을 제외한 영역을 클릭할 때 발생시키는 callback 함수\n *\n * ```tsx\n * import { useClickOutOfArea } from \"@ethan-heo/react-hooks\"\n *\n * function TestComponent({ onClick }: { onClick: () => void }) {\n *      const ref = useRef<HTMLButtonElement>(null);\n *      useClickOutOfArea(ref, onClick);\n *\n *      return (\n *          <>\n *              outer\n *              <button ref={ref}>\n *                  <span>inner</span>\n *              </button>\n *          </>\n *      );\n *  }\n * ```\n */\nexport default function useClickOutOfArea<T extends HTMLElement>(\n    target: Target<T>,\n    callback: () => void\n) {\n    useEffect(() => {\n        const targetEl = findElement(target);\n\n        if (!targetEl) throw TypeError(`Not found target`, { cause: target });\n\n        document.addEventListener(\"click\", handleDocumentClick);\n\n        return () => {\n            document.removeEventListener(\"click\", handleDocumentClick);\n        };\n\n        function handleDocumentClick(ev: MouseEvent) {\n            const _target = ev.target as HTMLElement;\n\n            if (!targetEl?.contains(_target)) {\n                callback();\n            }\n        }\n    }, []);\n}\n","import { useEffect, useRef } from \"react\";\nimport findElement from \"../utils/findElement\";\n\ntype MoveToScrollOptions = {\n    boundary: number;\n};\n\nconst defaultOptions: MoveToScrollOptions = {\n    boundary: 40,\n};\n\nfunction useMoveToScroll<T extends HTMLElement>(\n    target: React.RefObject<T> | HTMLElement | string,\n    options: MoveToScrollOptions = defaultOptions\n) {\n    const state = useRef({\n        isActive: false,\n    });\n\n    useEffect(() => {\n        const _target = findElement(target);\n\n        if (!_target) return;\n\n        _target.addEventListener(\"mousedown\", activate);\n        _target.addEventListener(\"touchstart\", activate);\n        _target.addEventListener(\"mouseup\", inactivate);\n        _target.addEventListener(\"touchend\", inactivate);\n        _target.addEventListener(\"mousemove\", moveCursor);\n        _target.addEventListener(\"touchmove\", moveTouch);\n\n        return () => {\n            _target?.removeEventListener(\"mousedown\", activate);\n            _target?.removeEventListener(\"touchstart\", activate);\n            _target?.removeEventListener(\"mouseup\", inactivate);\n            _target?.removeEventListener(\"touchend\", inactivate);\n            _target?.removeEventListener(\"mousemove\", moveCursor);\n            _target?.removeEventListener(\"touchmove\", moveTouch);\n        };\n\n        function activate() {\n            state.current.isActive = true;\n        }\n        function inactivate() {\n            state.current.isActive = false;\n        }\n\n        function moveCursor(e: MouseEvent) {\n            if (!state.current.isActive) return;\n\n            const target = e.currentTarget as HTMLElement;\n\n            moveToScroll(\n                target,\n                getPosition(target, options.boundary, getCoordinate(e))\n            );\n        }\n\n        function moveTouch(e: TouchEvent) {\n            if (!state.current.isActive) return;\n\n            const target = e.currentTarget as HTMLElement;\n            const position = getPosition(\n                target,\n                options.boundary,\n                getCoordinate(e)\n            );\n\n            /**\n             * https://www.uriports.com/blog/easy-fix-for-intervention-ignored-attempt-to-cancel-a-touchmove-event-with-cancelable-false/\n             */\n            if (e.cancelable && position !== POSITION.CENTER) {\n                e.preventDefault();\n            }\n\n            moveToScroll(target, position);\n        }\n    }, [options]);\n}\n\nexport default useMoveToScroll;\n\nfunction getCoordinate(e: MouseEvent | TouchEvent): [number, number] {\n    const { left, top } = getBoundingClientRect(e.currentTarget as HTMLElement);\n\n    if (\"clientX\" in e) {\n        return [e.clientX - left, e.clientY - top];\n    } else {\n        return [\n            e.changedTouches[0].clientX - left,\n            e.changedTouches[0].clientY - top,\n        ];\n    }\n}\n\nfunction getBoundingClientRect(el: HTMLElement) {\n    if (el === document.body) {\n        return {\n            left: 0,\n            top: 0,\n        };\n    } else {\n        return el.getBoundingClientRect();\n    }\n}\n\nconst POSITION = {\n    LEFT: 0,\n    RIGHT: 1,\n    TOP: 2,\n    BOTTOM: 3,\n    CENTER: 4,\n};\n\nfunction getPosition(\n    target: HTMLElement,\n    boundary: number,\n    pos: [number, number]\n) {\n    const { width, height } = target.getBoundingClientRect();\n    const [posX, posY] = pos;\n\n    if (posX >= 0 && posX <= boundary) {\n        return POSITION.LEFT;\n    }\n\n    if (posX >= width - boundary && posX <= width) {\n        return POSITION.RIGHT;\n    }\n\n    if (posY >= 0 && posY <= boundary) {\n        return POSITION.TOP;\n    }\n\n    if (posY >= height - boundary && posY <= height) {\n        return POSITION.BOTTOM;\n    }\n\n    return POSITION.CENTER;\n}\n\nfunction moveToScroll(el: HTMLElement, position: number) {\n    switch (position) {\n        case POSITION.TOP:\n            el.scrollTo({\n                top: el.scrollTop - 5,\n            });\n            break;\n        case POSITION.BOTTOM:\n            el.scrollTo({\n                top: el.scrollTop + 5,\n            });\n            break;\n        case POSITION.LEFT:\n            el.scrollTo({\n                left: el.scrollLeft - 5,\n            });\n            break;\n        case POSITION.RIGHT:\n            el.scrollTo({\n                left: el.scrollLeft + 5,\n            });\n            break;\n        default:\n    }\n}\n"],"names":["findElement","target","useClickOutOfArea","callback","useEffect","targetEl","handleDocumentClick","ev","_target","defaultOptions","useMoveToScroll","options","state","useRef","activate","inactivate","moveCursor","moveTouch","e","moveToScroll","getPosition","getCoordinate","position","POSITION","left","top","getBoundingClientRect","el","boundary","pos","width","height","posX","posY"],"mappings":"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"}